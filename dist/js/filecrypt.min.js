var FileCryptUtil = function () {
};
FileCryptUtil.convertFileSize = function (t) {
    var i = -1, e = [" kB", " MB", " GB", " TB", "PB", "EB", "ZB", "YB"];
    do t /= 1024, i++; while (t > 1024);
    return Math.max(t, .1).toFixed(1) + e[i]
}, FileCryptUtil.str2ab = function (t) {
    for (var i = new ArrayBuffer(t.length), e = new Uint8Array(i), n = 0, o = t.length; n < o; n++)e[n] = t.charCodeAt(n);
    return i
};
var FileCryptWorkerCollection = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this.items = [], this._initComponent()
};
FileCryptWorkerCollection.prototype = {
    DEFAULTS: {
        count: 4, success: function (t) {
        }, failure: function (t) {
        }
    }, _initComponent: function () {
        for (var t = 0; t < this.options.count; t++) {
            var i = new Worker("/dist/js/worker.encrypt.js");
            i.onError = this.options.failure, this.items.push(i)
        }
        this.onSuccess(this.options.success)
    }, _forEach: function (t) {
        return this.items.forEach(function (i) {
            t(i)
        }), this
    }, getLength: function () {
        return this.items.length
    }, getAt: function (t) {
        return this.items[t]
    }, onSuccess: function (t) {
        return this._forEach(function (i) {
            i.addEventListener("message", t, !1)
        }), this
    }, terminate: function () {
        return this._forEach(function (t) {
            t.terminate()
        }), this
    }
};
var FileCryptHashCollection = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this.items = [], this._initComponent(this.options.items)
};
FileCryptHashCollection.prototype = {
    DEFAULTS: {items: [], delimiter: "/--delimiter--/"}, _initComponent: function (t) {
        t.forEach($.proxy(this.add, this))
    }, getLength: function () {
        return this.items.length
    }, forEach: function (t) {
        return this.items.forEach($.proxy(function (i, e) {
            t(i, e, this)
        }, this)), this
    }, add: function (t, i) {
        return void 0 !== i ? this.items[i] = t : this.items.push(t), this
    }
}, FileCryptHashCollection.prototype.toString = function () {
    return this.items.join(this.options.delimiter)
};
var FileCryptBlobCollection = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this._initComponent(this.options.file)
};
FileCryptBlobCollection.prototype = {
    DEFAULTS: {chunk_size: 1048576}, _initComponent: function (t) {
        this.file = t, this.items = [], t.slice = t.mozSlice || t.webkitSlice || t.slice;
        for (var i = 0; i < t.size;)this.add(t.slice(i, i += this.options.chunk_size))
    }, getLength: function () {
        return this.items.length
    }, forEach: function (t) {
        return this.items.forEach($.proxy(function (i, e) {
            t(i, e, this)
        }, this)), this
    }, add: function (t, i) {
        return void 0 !== i ? this.items[i] = t : this.items.push(t), this
    }
};
var FileCrypt = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this._initComponent(this.options.file)
};
FileCrypt.prototype = {
    DEFAULTS: {
        file: {},
        passphrase: "",
        chunk_size: 1048576,
        delimiter: "/file-crypt-delimiter/",
        listeners: {
            crypting: function () {
            }
        },
        proxy: {url: "", type: "POST", contentType: "text/plain", processData: !1, cache: !1}
    }, _initComponent: function (t) {
        this._encrypted = this._encrypt(new FileCryptBlobCollection({
            file: t,
            chunk_size: this.options.chunk_size
        }), this.options.passphrase)
    }, _encrypt: function (t, i) {
        var e = new FileCryptHashCollection({delimiter: this.options.delimiter}), n = new FileCryptWorkerCollection({count: t.getLength()}), o = 0;
        return n.onSuccess($.proxy(function (i) {
            ++o, this.options.listeners.crypting({process: 100 / t.getLength() * o}), e.add(i.data.data, i.data.index), o === t.getLength() && n.terminate()
        }, this)), t.forEach(function (t, e) {
            n.getAt(e % n.getLength()).postMessage({part: t, index: e, passphrase: i})
        }), e
    }, save: function (t) {
        var i = $.extend({
            headers: {"X-File-Content-Type": this.options.file.type, "X-File-Name": this.options.file.name},
            data: this._encrypted.toString()
        }, this.options.proxy, t);
        return $.ajax(i)
    }
}, FileCrypt.factory = function (t, i) {
    return new this({file: t, passphrase: i})
};
var FileDecryptWorkerCollection = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this.items = [], this._initComponent(this.options.count)
};
FileDecryptWorkerCollection.prototype = {
    DEFAULTS: {
        count: 4, listeners: {
            success: function (t) {
            }, failure: function (t) {
            }, terminate: function (t) {
            }
        }
    }, _initComponent: function (t) {
        for (var i = 0; i < t; i++) {
            var e = new Worker("/dist/js/worker.decrypt.js");
            e.onError = this.options.listeners.failure, this.items.push(e)
        }
        this.onSuccess(this.options.listeners.success)
    }, _forEach: function (t) {
        return this.items.forEach(function (i) {
            t(i)
        }), this
    }, getLength: function () {
        return this.items.length
    }, getAt: function (t) {
        return this.items[t]
    }, onSuccess: function (t) {
        return this._forEach(function (i) {
            i.addEventListener("message", t, !1)
        }), this
    }, terminate: function (t) {
        return this._forEach(function (t) {
            t.terminate()
        }), this.options.listeners.terminate(this, t), this
    }
};
var FileDecryptBlobCollection = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this.items = [], this._initComponent(this.options.items)
};
FileDecryptBlobCollection.prototype = {
    DEFAULTS: {items: []}, _initComponent: function (t) {
        t.forEach($.proxy(this.add, this))
    }, getLength: function () {
        return this.items.length
    }, forEach: function (t) {
        return this.items.forEach($.proxy(function (i, e) {
            t(i, e, this)
        }, this)), this
    }, add: function (t, i) {
        return void 0 !== i ? this.items[i] = t : this.items.push(t), this
    }
}, FileDecryptBlobCollection.prototype.toString = function () {
    return this.items.join("")
};
var FileDecrypt = function (t) {
    this.options = $.extend({}, this.DEFAULTS, t), this._initComponent(this.options.url)
};
FileDecrypt.prototype = {
    DEFAULTS: {
        url: "",
        passphrase: "",
        delimiter: "/file-crypt-delimiter/",
        listeners: {
            download: function () {
            }, decrypting: function () {
            }
        }
    }, _initComponent: function (t) {
        $.ajax({
            url: t, type: "GET", success: $.proxy(function (t) {
                this._blobCollection = new FileCryptHashCollection({items: t.split(this.options.delimiter)})
            }, this)
        })
    }, process: function (t) {
        this._decrypt(this._blobCollection, this.options.passphrase)
    }, _decrypt: function (t, i) {
        var e = new FileDecryptWorkerCollection({
            count: t.getLength(), listeners: {
                terminate: $.proxy(function (t, i) {
                    var e = i.toString(), n = new Blob([FileCryptUtil.str2ab(e)], {type: "application/pdf"}), o = new FileReader;
                    o.onload = function (t) {
                        $(".btn-download").attr("href", t.target.result).hide().fadeIn()
                    }, o.readAsDataURL(n)
                }, this)
            }
        }), n = 0, o = new FileDecryptBlobCollection;
        return e.onSuccess($.proxy(function (i) {
            ++n, i.data.success && o.add(i.data.part, i.data.index), n === t.getLength() && e.terminate(o)
        }, this)), t.forEach(function (t, n) {
            e.getAt(n % e.getLength()).postMessage({hash: t, index: n, passphrase: i})
        }), o
    }
};